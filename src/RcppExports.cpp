// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/schnellerGP.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_n_levels
int get_n_levels(int N, int M);
RcppExport SEXP _schnellerGP_get_n_levels(SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(get_n_levels(N, M));
    return rcpp_result_gen;
END_RCPP
}
// setup_compressedMatrixGP_Matern
Rcpp::XPtr<HODLR_Tree> setup_compressedMatrixGP_Matern(Mat X, double sigma, double rho, double tol, int M);
RcppExport SEXP _schnellerGP_setup_compressedMatrixGP_Matern(SEXP XSEXP, SEXP sigmaSEXP, SEXP rhoSEXP, SEXP tolSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(setup_compressedMatrixGP_Matern(X, sigma, rho, tol, M));
    return rcpp_result_gen;
END_RCPP
}
// setup_compressedMatrixGP_MaternP1
Rcpp::XPtr<HODLR_Tree> setup_compressedMatrixGP_MaternP1(Mat X, double sigma, double rho, double tol, int M);
RcppExport SEXP _schnellerGP_setup_compressedMatrixGP_MaternP1(SEXP XSEXP, SEXP sigmaSEXP, SEXP rhoSEXP, SEXP tolSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(setup_compressedMatrixGP_MaternP1(X, sigma, rho, tol, M));
    return rcpp_result_gen;
END_RCPP
}
// setup_compressedMatrixGP_Matern_tP
Rcpp::XPtr<HODLR_Tree> setup_compressedMatrixGP_Matern_tP(Mat X, Mat tP, double sigma, double rho, double tol, int M);
RcppExport SEXP _schnellerGP_setup_compressedMatrixGP_Matern_tP(SEXP XSEXP, SEXP tPSEXP, SEXP sigmaSEXP, SEXP rhoSEXP, SEXP tolSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Mat >::type tP(tPSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(setup_compressedMatrixGP_Matern_tP(X, tP, sigma, rho, tol, M));
    return rcpp_result_gen;
END_RCPP
}
// setup_compressedMatrixGP_sqrExp_tP
Rcpp::XPtr<HODLR_Tree> setup_compressedMatrixGP_sqrExp_tP(Mat X, Mat tP, double sigma, double rho, double tol, int M);
RcppExport SEXP _schnellerGP_setup_compressedMatrixGP_sqrExp_tP(SEXP XSEXP, SEXP tPSEXP, SEXP sigmaSEXP, SEXP rhoSEXP, SEXP tolSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Mat >::type tP(tPSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(setup_compressedMatrixGP_sqrExp_tP(X, tP, sigma, rho, tol, M));
    return rcpp_result_gen;
END_RCPP
}
// setup_compressedMatrixGP_sqrExp
Rcpp::XPtr<HODLR_Tree> setup_compressedMatrixGP_sqrExp(Mat X, double sigma, double rho, double tol, int M);
RcppExport SEXP _schnellerGP_setup_compressedMatrixGP_sqrExp(SEXP XSEXP, SEXP sigmaSEXP, SEXP rhoSEXP, SEXP tolSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(setup_compressedMatrixGP_sqrExp(X, sigma, rho, tol, M));
    return rcpp_result_gen;
END_RCPP
}
// setup_compressedMatrixGP_sqrExpP1
Rcpp::XPtr<HODLR_Tree> setup_compressedMatrixGP_sqrExpP1(Mat X, double sigma, double rho, double tol, int M);
RcppExport SEXP _schnellerGP_setup_compressedMatrixGP_sqrExpP1(SEXP XSEXP, SEXP sigmaSEXP, SEXP rhoSEXP, SEXP tolSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(setup_compressedMatrixGP_sqrExpP1(X, sigma, rho, tol, M));
    return rcpp_result_gen;
END_RCPP
}
// simulate_compressedMatrixGP
NumericVector simulate_compressedMatrixGP(int N, Rcpp::XPtr<HODLR_Tree> GPobj);
RcppExport SEXP _schnellerGP_simulate_compressedMatrixGP(SEXP NSEXP, SEXP GPobjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<HODLR_Tree> >::type GPobj(GPobjSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_compressedMatrixGP(N, GPobj));
    return rcpp_result_gen;
END_RCPP
}
// simulate_compressedMatrixGP_TP
NumericVector simulate_compressedMatrixGP_TP(int N, Rcpp::XPtr<HODLR_Tree> GPobj, NumericVector tP);
RcppExport SEXP _schnellerGP_simulate_compressedMatrixGP_TP(SEXP NSEXP, SEXP GPobjSEXP, SEXP tPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<HODLR_Tree> >::type GPobj(GPobjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tP(tPSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_compressedMatrixGP_TP(N, GPobj, tP));
    return rcpp_result_gen;
END_RCPP
}
// getSymmetricFactor
Eigen::MatrixXd getSymmetricFactor(Rcpp::XPtr<HODLR_Tree> GPobj);
RcppExport SEXP _schnellerGP_getSymmetricFactor(SEXP GPobjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<HODLR_Tree> >::type GPobj(GPobjSEXP);
    rcpp_result_gen = Rcpp::wrap(getSymmetricFactor(GPobj));
    return rcpp_result_gen;
END_RCPP
}
// matmatProduct
Eigen::MatrixXd matmatProduct(Rcpp::XPtr<HODLR_Tree> GPobj, Eigen::MatrixXd M);
RcppExport SEXP _schnellerGP_matmatProduct(SEXP GPobjSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<HODLR_Tree> >::type GPobj(GPobjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(matmatProduct(GPobj, M));
    return rcpp_result_gen;
END_RCPP
}
// solve_HODLR
NumericVector solve_HODLR(Rcpp::XPtr<HODLR_Tree> GPobj, Mat b);
RcppExport SEXP _schnellerGP_solve_HODLR(SEXP GPobjSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<HODLR_Tree> >::type GPobj(GPobjSEXP);
    Rcpp::traits::input_parameter< Mat >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_HODLR(GPobj, b));
    return rcpp_result_gen;
END_RCPP
}
// log_det_HODLR
NumericVector log_det_HODLR(Rcpp::XPtr<HODLR_Tree> GPobj);
RcppExport SEXP _schnellerGP_log_det_HODLR(SEXP GPobjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<HODLR_Tree> >::type GPobj(GPobjSEXP);
    rcpp_result_gen = Rcpp::wrap(log_det_HODLR(GPobj));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_schnellerGP_get_n_levels", (DL_FUNC) &_schnellerGP_get_n_levels, 2},
    {"_schnellerGP_setup_compressedMatrixGP_Matern", (DL_FUNC) &_schnellerGP_setup_compressedMatrixGP_Matern, 5},
    {"_schnellerGP_setup_compressedMatrixGP_MaternP1", (DL_FUNC) &_schnellerGP_setup_compressedMatrixGP_MaternP1, 5},
    {"_schnellerGP_setup_compressedMatrixGP_Matern_tP", (DL_FUNC) &_schnellerGP_setup_compressedMatrixGP_Matern_tP, 6},
    {"_schnellerGP_setup_compressedMatrixGP_sqrExp_tP", (DL_FUNC) &_schnellerGP_setup_compressedMatrixGP_sqrExp_tP, 6},
    {"_schnellerGP_setup_compressedMatrixGP_sqrExp", (DL_FUNC) &_schnellerGP_setup_compressedMatrixGP_sqrExp, 5},
    {"_schnellerGP_setup_compressedMatrixGP_sqrExpP1", (DL_FUNC) &_schnellerGP_setup_compressedMatrixGP_sqrExpP1, 5},
    {"_schnellerGP_simulate_compressedMatrixGP", (DL_FUNC) &_schnellerGP_simulate_compressedMatrixGP, 2},
    {"_schnellerGP_simulate_compressedMatrixGP_TP", (DL_FUNC) &_schnellerGP_simulate_compressedMatrixGP_TP, 3},
    {"_schnellerGP_getSymmetricFactor", (DL_FUNC) &_schnellerGP_getSymmetricFactor, 1},
    {"_schnellerGP_matmatProduct", (DL_FUNC) &_schnellerGP_matmatProduct, 2},
    {"_schnellerGP_solve_HODLR", (DL_FUNC) &_schnellerGP_solve_HODLR, 2},
    {"_schnellerGP_log_det_HODLR", (DL_FUNC) &_schnellerGP_log_det_HODLR, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_schnellerGP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
